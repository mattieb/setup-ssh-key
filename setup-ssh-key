#!/bin/sh
#
# Copyright (c) 2024 Mattie Behrens.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR C PYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

export PATH=/usr/bin:/bin

usage() {
    cat <<EOT >&2
Usage: $(basename "$0") [-p] [-t TYPE] [NAME]

  Creates an SSH key with a random passphrase, storing that passphrase
  in the macOS keychain.

  -p requests the passphrase also be printed to stdout. Use this
  only if you need to separately use the passphrase.

  -t supplies a key TYPE, e.g. "ed25519" (otherwise the default)
  or "rsa".

  NAME is an identifying name for the key, e.g. "id" (otherwise the
  default) or "work".

EOT
    exit 1
}

print_passphrase=0
type="ed25519"
while getopts pt: flag; do
    case "${flag}" in
    p)
        print_passphrase=1
        ;;
    t) type="${OPTARG}" ;;
    *) usage ;;
    esac
done

shift $((OPTIND - 1))
if [ -z "${1}" ]; then
    name="id"
else
    name="$1"
fi

if [ -n "$2" ]; then
    echo "$0": too many arguments >&2
    usage
fi

set -e

keyfile="${name}_${type}"
keypath="${HOME}/.ssh/${keyfile}"

if [ -e "${keypath}" ]; then
    echo "$0": "${keypath}" already exists >&2
    exit 2
fi

# ssh-keygen's manpage recommends "10-30 characters" of "a mix of
# upper and lowercase letters, numbers, and non-alphanumeric
# characters".  This is 20 bytes of random base64 (15 8-bit bytes
# down to 20 6-bit chars).

passphrase=$(
    dd if=/dev/random bs=15 count=1 2>/dev/null |
        base64 |
        cut -b 1-20
)

# Create a reader and a FIFO that can be used as an ssh-askpass
# stand-in to feed the passphrase to ssh-keygen and ssh-add.

tmpdir="$(mktemp -d)"
__cleanup() {
    rm -rf "${tmpdir}"
}
trap __cleanup EXIT

askpass="${tmpdir}/askpass"
passphrase_fifo="${tmpdir}/passphrase"
mkfifo -m 600 "${passphrase_fifo}"
cat <<EOF >"${askpass}"
#!/bin/sh
cat <"${passphrase_fifo}"
EOF
chmod +x "${askpass}"

# Generate the key with a comment that makes it unique per username,
# host, and key name/type. Allow ssh-keygen output to show through
# on stderr since it's useful.

username="$(id -un)"
hostname="$(hostname)"
if [ "${name}" = "id" ]; then
    comment="${username}@${hostname}"
else
    comment="${username}+${name}@${hostname}"
fi

SSH_ASKPASS="${askpass}" SSH_ASKPASS_REQUIRE=force \
    ssh-keygen \
    -t "${type}" \
    -C "${comment}" \
    -f "${keypath}" \
    1>&2 &

# Feed the passphrase to the FIFO twice (since ssh-keygen asks for
# it twice).

cat <<EOF >"${passphrase_fifo}"
${passphrase}
EOF

cat <<EOF >"${passphrase_fifo}"
${passphrase}
EOF

wait

# Save the key to the keychain.

SSH_ASKPASS="${askpass}" SSH_ASKPASS_REQUIRE=force \
    ssh-add -q --apple-use-keychain "${keypath}" &

cat <<EOF >"${passphrase_fifo}"
${passphrase}
EOF

wait

# Since ssh-add put our decrypted key in the agent, take it back
# out again.

ssh-add -dq "${keypath}"

# Print the passphrase if requested.

if [ "${print_passphrase}" = 1 ]; then
    cat <<EOF
${passphrase}
EOF
fi
